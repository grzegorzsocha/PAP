/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.edu.pw.medcomplexsoft.gui;

import java.time.LocalDate;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import pl.edu.pw.medcomplexsoft.model.*;
import pl.edu.pw.medcomplexsoft.database.*;

/**
 *
 * @author kubix
 */
public class PatientPanel extends javax.swing.JFrame {
    private Patient loggedPatient;

    /**
     * Creates new form PatientPanel
     */
    public PatientPanel(Patient patient) {
        initComponents();
        loggedPatient = patient;
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeLabel = new javax.swing.JLabel();
        todayDateLabel = new javax.swing.JLabel();
        namesDayLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        prescriptionsTable = new javax.swing.JTable();
        weekDayLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changePasswordItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        prescriptionMenu = new javax.swing.JMenu();
        prescpriptionListMenu = new javax.swing.JMenuItem();
        appointmentMenu = new javax.swing.JMenu();
        appointmentListMenu = new javax.swing.JMenuItem();
        doctorsMenu = new javax.swing.JMenu();
        doctorsItem = new javax.swing.JMenuItem();
        serviceMenu = new javax.swing.JMenu();
        servicesItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Panel pacjenta");
        setPreferredSize(new java.awt.Dimension(1200, 900));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 900));

        welcomeLabel.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        welcomeLabel.setText("Witaj, <name>!");

        todayDateLabel.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        todayDateLabel.setText("2022-01-13");

        namesDayLabel.setFont(new java.awt.Font("Ubuntu", 2, 28)); // NOI18N
        namesDayLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        namesDayLabel.setText("Imieniny:");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Najbliższe wizyty:");

        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data i godzina", "Pacjent", "Lekarz", "Sala"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(appointmentsTable);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel2.setText("Aktualne recepty:");

        prescriptionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data wystawienia", "Data wygaśnięcia", "Wystawiona przez"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prescriptionsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(prescriptionsTable);

        weekDayLabel.setFont(new java.awt.Font("Ubuntu", 2, 28)); // NOI18N
        weekDayLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        weekDayLabel.setText("Imieniny:");

        jMenu1.setText("Plik");

        changePasswordItem.setText("Zmień hasło");
        changePasswordItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordItemActionPerformed(evt);
            }
        });
        jMenu1.add(changePasswordItem);

        logoutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        logoutMenuItem.setText("Wyloguj");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(logoutMenuItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitItem.setText("Wyjście");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitItem);

        jMenuBar1.add(jMenu1);

        prescriptionMenu.setText("Moje Recepty");

        prescpriptionListMenu.setText("Lista recept");
        prescpriptionListMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescpriptionListMenuActionPerformed(evt);
            }
        });
        prescriptionMenu.add(prescpriptionListMenu);

        jMenuBar1.add(prescriptionMenu);

        appointmentMenu.setText("Moje wizyty");

        appointmentListMenu.setText("Lista wizyt");
        appointmentListMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentListMenuActionPerformed(evt);
            }
        });
        appointmentMenu.add(appointmentListMenu);

        jMenuBar1.add(appointmentMenu);

        doctorsMenu.setText("Lekarze");

        doctorsItem.setText("Przeglądaj");
        doctorsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorsItemActionPerformed(evt);
            }
        });
        doctorsMenu.add(doctorsItem);

        jMenuBar1.add(doctorsMenu);

        serviceMenu.setText("Usługi");

        servicesItem.setText("Przeglądaj");
        servicesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicesItemActionPerformed(evt);
            }
        });
        serviceMenu.add(servicesItem);

        jMenuBar1.add(serviceMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(todayDateLabel))
                    .addComponent(namesDayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1574, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(weekDayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1574, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(todayDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(weekDayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(namesDayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 261, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void prescpriptionListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescpriptionListMenuActionPerformed
        PrescriptionListDialog prescriptionListDialog = new PrescriptionListDialog(null, true, loggedPatient);
        prescriptionListDialog.setLocationRelativeTo(this.rootPane);
        prescriptionListDialog.showDialog();
    }//GEN-LAST:event_prescpriptionListMenuActionPerformed

    private void appointmentListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentListMenuActionPerformed
        AppointmentsList appointmentList = new AppointmentsList(null, true, loggedPatient);
        appointmentList.setLocationRelativeTo(this.rootPane);
        appointmentList.showDialog();
    }//GEN-LAST:event_appointmentListMenuActionPerformed

    private void doctorsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorsItemActionPerformed
        DoctorListDialog doctorListDialog = new DoctorListDialog(null, true, loggedPatient);
        doctorListDialog.setLocationRelativeTo(this.rootPane);
        doctorListDialog.showDialog();
    }//GEN-LAST:event_doctorsItemActionPerformed

    private void servicesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicesItemActionPerformed
        ServiceListDialog serviceListDialog = new ServiceListDialog(null, true, loggedPatient);
        serviceListDialog.setLocationRelativeTo(this.rootPane);
        serviceListDialog.showDialog();
    }//GEN-LAST:event_servicesItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int selection = JOptionPane.showConfirmDialog(this, "Czy chcesz wyjść z programu?", "Wyjście", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(selection == JOptionPane.OK_OPTION)
            System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void changePasswordItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordItemActionPerformed
        ChangePasswordDialog changePasswordDialog = new ChangePasswordDialog(null, true, loggedPatient);
        changePasswordDialog.setLocationRelativeTo(this.rootPane);
        changePasswordDialog.showDialog();
    }//GEN-LAST:event_changePasswordItemActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        int selection = JOptionPane.showConfirmDialog(this, "Czy na pewno chcesz się wylogować?", "Wylogowywanie",
                                                      JOptionPane.OK_CANCEL_OPTION);
        if(selection == JOptionPane.OK_OPTION) {
            dispose();
            JFrame loginWindow = new LoginWindow();
            loginWindow.setVisible(true);
        }
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void loadData() {
        welcomeLabel.setText("Witaj, " + loggedPatient.getFullName() + "!");
        LocalDate todayDate = LocalDate.now();
        todayDateLabel.setText(todayDate.toString());
        EntityManager entityManager = Database.getEntityManager();
        String sqlQuery = "SELECT a FROM Appointment a WHERE status='ACTIVE' AND patient_id=?1 ORDER BY appointmentdate ASC";
        TypedQuery<Appointment> query = entityManager.createQuery(sqlQuery, Appointment.class).setMaxResults(5);
        query.setParameter(1, loggedPatient.getId());
        List<Appointment> results = query.getResultList();
        DefaultTableModel model = (DefaultTableModel)appointmentsTable.getModel();
        results.forEach(a -> {
            String data[] = {a.getAppointmentDate().toString(), a.getPatient().getFullName(),
                             a.getDoctor().getFullName(), a.getOffice()};
            model.addRow(data);
        });
        sqlQuery = "SELECT p FROM Prescription p WHERE status='ACTIVE' AND receivingpatient_id=?1 ORDER BY issuedate ASC";
        TypedQuery<Prescription> prescriptionQuery = entityManager.createQuery(sqlQuery, Prescription.class).setMaxResults(5);
        prescriptionQuery.setParameter(1, loggedPatient.getId());
        query.setParameter(1, loggedPatient.getId());
        List<Prescription> prescriptionResults = prescriptionQuery.getResultList();
        DefaultTableModel prescpriptionModel = (DefaultTableModel)prescriptionsTable.getModel();
        prescriptionResults.forEach(p -> {
            String data[] = {p.getIssueDate().toString(), p.getExpirationDate().toString(),
                             p.getPrescribingDoctor().getFullName()};
            prescpriptionModel.addRow(data);
        });
        Query namesQuery = entityManager.createNativeQuery("SELECT names FROM namesdays WHERE day=?1 AND month=?2");
        namesQuery.setParameter(1, todayDate.getDayOfMonth());
        namesQuery.setParameter(2, todayDate.getMonthValue());
        String result = (String)namesQuery.getSingleResult();
        namesDayLabel.setText("Imieniny: "+result);
        String[] weekDays = {"Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota", "Niedziela"};
        weekDayLabel.setText(weekDays[todayDate.getDayOfWeek().getValue()-1]+", "+todayDate.getDayOfYear()+". dzień roku, do końca pozostało: "+(todayDate.lengthOfYear()-todayDate.getDayOfYear()+" dni"));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientPanel(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem appointmentListMenu;
    private javax.swing.JMenu appointmentMenu;
    private javax.swing.JTable appointmentsTable;
    private javax.swing.JMenuItem changePasswordItem;
    private javax.swing.JMenuItem doctorsItem;
    private javax.swing.JMenu doctorsMenu;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JLabel namesDayLabel;
    private javax.swing.JMenuItem prescpriptionListMenu;
    private javax.swing.JMenu prescriptionMenu;
    private javax.swing.JTable prescriptionsTable;
    private javax.swing.JMenu serviceMenu;
    private javax.swing.JMenuItem servicesItem;
    private javax.swing.JLabel todayDateLabel;
    private javax.swing.JLabel weekDayLabel;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
